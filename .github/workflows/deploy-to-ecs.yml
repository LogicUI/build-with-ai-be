name: Deploy to ECS

on:
    push:
      paths:
        - "**.py" 
      branches:
        - main 
    workflow_dispatch:
jobs:
  deploy:
    name: Build, Push to ECR, and Deploy to ECS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: arn:aws:iam::471112658624:role/github-role
        aws-region: ${{ secrets.AWS_REGION }}
        audience: sts.amazonaws.com
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Log in to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and Push Docker image
      run: |
        ECR_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/build-with-ai-hackaton-be
        docker buildx build \
                --platform linux/amd64 \
                --tag $ECR_URI:latest \
                --push .



    - name: Update ECS Service to Deploy New Image
      run: |
          # Retrieve the current task definition and remove invalid fields
          NEW_TASK_DEFINITION=$(aws ecs describe-task-definition \
          --task-definition ${{ secrets.ECS_TASK_NAME }} \
          --region ${{ secrets.AWS_REGION }} | jq '.taskDefinition | 
            del(.status, .revision, .taskDefinitionArn, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
              
          # Update the image in the task definition
            UPDATED_TASK_DEFINITION=$(echo $NEW_TASK_DEFINITION | jq \
           '.containerDefinitions[0].image = "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/build-with-ai-hackaton-be:latest"')
              
          # Register the updated task definition
            REGISTERED_TASK_DEFINITION=$(aws ecs register-task-definition \
            --region ${{ secrets.AWS_REGION }} \
            --cli-input-json "$UPDATED_TASK_DEFINITION")
              
          # Extract the ARN of the new task definition
            NEW_TASK_ARN=$(echo $REGISTERED_TASK_DEFINITION | jq -r '.taskDefinition.taskDefinitionArn')
              
          # Update the ECS service to use the new task definition
            aws ecs update-service \
             --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
             --service ${{ secrets.ECS_SERVICE_NAME }} \
             --task-definition $NEW_TASK_ARN \
             --force-new-deployment \
              --region ${{ secrets.AWS_REGION }}



    - name: Update Target Group with New Container IP
      run: |
          # Step 1: Get the latest task ARN
            TASK_ARN=$(aws ecs list-tasks \
               --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
               --service-name ${{ secrets.ECS_SERVICE_NAME }} \
               --region ${{ secrets.AWS_REGION }} \
               | jq -r '.taskArns[0]')
        
          # Step 2: Get the ENI ID of the task
             ENI_ID=$(aws ecs describe-tasks \
                 --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
                 --tasks $TASK_ARN \
                 --region ${{ secrets.AWS_REGION }} \
                | jq -r '.tasks[0].attachments[0].details[] | select(.name=="networkInterfaceId") | .value')
        
           # Step 3: Get the container's private IP address
             PRIVATE_IP=$(aws ec2 describe-network-interfaces \
                  --network-interface-ids $ENI_ID \
                  --region ${{ secrets.AWS_REGION }} \
                  | jq -r '.NetworkInterfaces[0].PrivateIpAddress')
        
             echo "Container Private IP: $PRIVATE_IP"
        
             # Step 4: Register the IP with the Target Group
               aws elbv2 register-targets \
              --target-group-arn ${{ secrets.AWS_TARGET_GROUP_ARN}} \
              --targets Id=$PRIVATE_IP,Port=5000 \
              --region ${{ secrets.AWS_REGION }}
           
             
